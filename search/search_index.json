{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Zoey's Course Notes","text":"<p>This is my home page. I will use it to organize and share my course notes.</p>"},{"location":"tutorials/go-setup/","title":"Setting up a dev container for Go","text":"<ul> <li>Primary author: tangzoey</li> <li>Reviewer: Zixin Wei</li> </ul>"},{"location":"tutorials/go-setup/#prerequisites","title":"Prerequisites","text":"<p>To begin, ensure your system is equipped with the following:</p> <ol> <li> <p>Docker    Docker is essential for containerization. If you haven\u2019t installed it yet, download it from Docker Desktop.</p> </li> <li> <p>Visual Studio Code (VSCode)    Use VSCode as the recommended Integrated Development Environment (IDE). It can be downloaded from Visual Studio Code.</p> </li> <li> <p>Dev Containers Extension    Install the Dev Containers extension in Visual Studio Code to enable container-based development.</p> </li> </ol>"},{"location":"tutorials/go-setup/#step-by-step-instructions","title":"Step-by-Step Instructions","text":""},{"location":"tutorials/go-setup/#1-create-a-blank-directory","title":"1. Create a Blank Directory","text":"<p>Begin by setting up a new empty directory for your project, and initialize a Git repository in this directory:</p> <pre><code>mkdir go-dev-container\ncd go-dev-container\ngit init\n</code></pre>"},{"location":"tutorials/go-setup/#2-add-dev-container-configuration","title":"2. Add Dev Container Configuration","text":"<p>Set up a <code>.devcontainer</code> directory and create a <code>devcontainer.json</code> file within your project:</p> <pre><code>mkdir .devcontainer\ncd .devcontainer\ntouch devcontainer.json\n</code></pre> <p>Edit <code>devcontainer.json</code> with the following content:</p> <pre><code>{\n    \"name\": \"Go Dev Container\",\n    \"image\": \"mcr.microsoft.com/vscode/devcontainers/go:0-1.20\",\n    \"customizations\": {\n        \"vscode\": {\n            \"extensions\": [\n                \"golang.Go\"\n            ],\n            \"settings\": {\n                \"go.useLanguageServer\": true\n            }\n        }\n    },\n    \"postCreateCommand\": \"go version\"\n}\n</code></pre> <p>What is the effect of the above file?</p> <ul> <li><code>\"image\"</code> Specifies Microsoft's official Go development container image.</li> <li><code>\"extensions\": [\"golang.Go\"]</code> Ensures the Go extension for VSCode is automatically installed.</li> <li><code>\"go.useLanguageServer\": true</code> Configures Go tools to use the language server.</li> <li><code>\"postCreateCommand\": \"go version\"</code> Verifies the installed Go version after the container is built.</li> </ul>"},{"location":"tutorials/go-setup/#3-launch-the-project-in-a-dev-container","title":"3. Launch the Project in a Dev Container","text":"<ol> <li>Open the project directory in VS Code.</li> <li>Use the Command Palette (<code>Ctrl+Shift+P</code>) and select <code>Dev Containers: Reopen in Container</code>.</li> <li>Wait for the container to build and launch.</li> </ol>"},{"location":"tutorials/go-setup/#4-verify-the-go-installation","title":"4. Verify the Go Installation","text":"<p>Run the following command in the integrated terminal:</p> <pre><code>go version\n</code></pre> <p>You should see output confirming a recent version of Go (e.g., <code>go version go1.20 linux/amd64</code>).</p>"},{"location":"tutorials/go-setup/#5-initialize-a-go-project","title":"5. Initialize a Go Project","text":"<p>Run the following command to initialize a new Go module:</p> <pre><code>go mod init hello-comp423\n</code></pre> <p>This command generates a <code>go.mod</code> file, which tracks dependencies for your project.</p>"},{"location":"tutorials/go-setup/#6-write-the-hello-comp423-program","title":"6. Write the \"Hello COMP423\" Program","text":"<p>Create a new file named <code>main.go</code>:</p> <pre><code>touch main.go\n</code></pre> <p>Edit <code>main.go</code> with the following content:</p> <pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(\"Hello COMP423\")\n}\n</code></pre>"},{"location":"tutorials/go-setup/#7-run-the-program","title":"7. Run the Program","text":"<p>To run the program directly:</p> <pre><code>go run main.go\n</code></pre> <p>Output:</p> <pre><code>Hello COMP423\n</code></pre> <p>Note: The <code>go run</code> command compiles and runs the program in one step without creating a binary file.</p>"},{"location":"tutorials/go-setup/#8-build-and-run-the-binary","title":"8. Build and Run the Binary","text":"<p>To compile the program into a binary:</p> <pre><code>go build -o hello\n</code></pre> <p>This creates a binary named <code>hello</code>. Run the binary:</p> <pre><code>./hello\n</code></pre> <p>Output:</p> <pre><code>Hello COMP423\n</code></pre> <p>Discussion: The difference between <code>go build</code> and <code>go run</code></p> <ul> <li>The <code>go build</code> command is similar to the <code>gcc</code> command in COMP211, which compiles source code into an executable.</li> <li>Unlike <code>go run</code>, <code>go build</code> creates a reusable binary that can be executed without Go installed.</li> </ul>"},{"location":"tutorials/go-setup/#9-commit-your-changes","title":"9. Commit Your Changes","text":"<p>To save your work, commit your changes to Git:</p> <pre><code>git add .\ngit commit -m \"Initial setup with Hello COMP423\"\n</code></pre>"},{"location":"tutorials/go-setup/#tutorial-outcome","title":"Tutorial Outcome","text":"<p>To see an example of the completed Go project, visit the following GitHub repository.</p>"}]}